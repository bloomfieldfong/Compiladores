2020-10-02 00:29:57:959 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Decaf (@ lexer namespace {CustomIde}) (@ parser namespace {CustomIde}) (RULES (RULE program (BLOCK (ALT 'class' Id '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration))) (RULE varDeclaration (BLOCK (ALT (= vartype varType) Id ';') (ALT (= vartype varType) Id '[' Num ']' ';'))) (RULE structDeclaration (BLOCK (ALT 'struct' Id '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' Id) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT (= metoInt 'int') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoChar 'char') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoBool 'boolean') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metVoid 'void') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE parameter (BLOCK (ALT (= param parameterType) Id))) (RULE parameterType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT IfStatement) (ALT WhileStatement) (ALT returnStatement) (ALT methodCall ';') (ALT block) (ALT location '=' expression ';') (ALT location '=' '(char)' expression ';') (ALT (? (BLOCK (ALT expression))) ';'))) (RULE IfStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))))) (RULE WhileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT Id (? (BLOCK (ALT '.' location)))) (ALT Id '[' expression ']' (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT Num) (ALT CharacterLiteral) (ALT bool_literal) (ALT expression arith_higher_op expression) (ALT expression arith_op expression) (ALT expression rel_op expression) (ALT expression eq_op expression) (ALT expression cond_op expression) (ALT '-' expression) (ALT '!' expression) (ALT '(' expression ')'))) (RULE methodCall (BLOCK (ALT Id '(' (? (BLOCK (ALT arg (* (BLOCK (ALT ',' arg)))))) ')'))) (RULE arg (BLOCK (ALT expression))) (RULE arith_higher_op (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (RULE arith_op (BLOCK (ALT '+') (ALT '-'))) (RULE rel_op (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) (RULE eq_op (BLOCK (ALT '==') (ALT '!='))) (RULE cond_op (BLOCK (ALT '&&') (ALT '||'))) (RULE bool_literal (BLOCK (ALT 'true') (ALT 'false'))) (RULE Id (BLOCK (ALT Letter (* (BLOCK (ALT Letter) (ALT Digit)))))) (RULE Num (BLOCK (ALT (+ (BLOCK (ALT Digit)))))) (RULE CharacterLiteral (BLOCK (ALT '\'' SingleCharacter '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\]))))) (RULE Digit (BLOCK (ALT [0-9]))) (RULE Letter (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [  \t\r\n\u000C])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2020-10-02 00:29:57:986 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Decaf (@ lexer namespace {CustomIde}) (@ parser namespace {CustomIde}) (RULES (RULE program (BLOCK (ALT 'class' Id '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration))) (RULE varDeclaration (BLOCK (ALT (= vartype varType) Id ';') (ALT (= vartype varType) Id '[' Num ']' ';'))) (RULE structDeclaration (BLOCK (ALT 'struct' Id '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' Id) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT (= metoInt 'int') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoChar 'char') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoBool 'boolean') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metVoid 'void') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE parameter (BLOCK (ALT (= param parameterType) Id))) (RULE parameterType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT IfStatement) (ALT WhileStatement) (ALT returnStatement) (ALT methodCall ';') (ALT block) (ALT location '=' expression ';') (ALT location '=' '(char)' expression ';') (ALT (? (BLOCK (ALT expression))) ';'))) (RULE IfStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))))) (RULE WhileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT Id (? (BLOCK (ALT '.' location)))) (ALT Id '[' expression ']' (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT Num) (ALT CharacterLiteral) (ALT bool_literal) (ALT expression arith_higher_op expression) (ALT expression arith_op expression) (ALT expression rel_op expression) (ALT expression eq_op expression) (ALT expression cond_op expression) (ALT '-' expression) (ALT '!' expression) (ALT '(' expression ')'))) (RULE methodCall (BLOCK (ALT Id '(' (? (BLOCK (ALT arg (* (BLOCK (ALT ',' arg)))))) ')'))) (RULE arg (BLOCK (ALT expression))) (RULE arith_higher_op (BLOCK (ALT (SET '*' '/' '%')))) (RULE arith_op (BLOCK (ALT (SET '+' '-')))) (RULE rel_op (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE eq_op (BLOCK (ALT (SET '==' '!=')))) (RULE cond_op (BLOCK (ALT (SET '&&' '||')))) (RULE bool_literal (BLOCK (ALT (SET 'true' 'false')))) (RULE Id (BLOCK (ALT Letter (* (BLOCK (ALT Letter) (ALT Digit)))))) (RULE Num (BLOCK (ALT (+ (BLOCK (ALT Digit)))))) (RULE CharacterLiteral (BLOCK (ALT '\'' SingleCharacter '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\]))))) (RULE Digit (BLOCK (ALT [0-9]))) (RULE Letter (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [  \t\r\n\u000C])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2020-10-02 00:29:58:013 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Decaf (@ parser namespace {CustomIde}) (RULES (RULE program (BLOCK (ALT 'class' Id '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration))) (RULE varDeclaration (BLOCK (ALT (= vartype varType) Id ';') (ALT (= vartype varType) Id '[' Num ']' ';'))) (RULE structDeclaration (BLOCK (ALT 'struct' Id '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' Id) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT (= metoInt 'int') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoChar 'char') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoBool 'boolean') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metVoid 'void') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE parameter (BLOCK (ALT (= param parameterType) Id))) (RULE parameterType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT IfStatement) (ALT WhileStatement) (ALT returnStatement) (ALT methodCall ';') (ALT block) (ALT location '=' expression ';') (ALT location '=' '(char)' expression ';') (ALT (? (BLOCK (ALT expression))) ';'))) (RULE returnStatement (BLOCK (ALT 'return' (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT Id (? (BLOCK (ALT '.' location)))) (ALT Id '[' expression ']' (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT Num) (ALT CharacterLiteral) (ALT bool_literal) (ALT expression arith_higher_op expression) (ALT expression arith_op expression) (ALT expression rel_op expression) (ALT expression eq_op expression) (ALT expression cond_op expression) (ALT '-' expression) (ALT '!' expression) (ALT '(' expression ')'))) (RULE methodCall (BLOCK (ALT Id '(' (? (BLOCK (ALT arg (* (BLOCK (ALT ',' arg)))))) ')'))) (RULE arg (BLOCK (ALT expression))) (RULE arith_higher_op (BLOCK (ALT (SET '*' '/' '%')))) (RULE arith_op (BLOCK (ALT (SET '+' '-')))) (RULE rel_op (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE eq_op (BLOCK (ALT (SET '==' '!=')))) (RULE cond_op (BLOCK (ALT (SET '&&' '||')))) (RULE bool_literal (BLOCK (ALT (SET 'true' 'false'))))))
2020-10-02 00:29:58:013 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR DecafLexer (@ lexer namespace {CustomIde}) (@ parser namespace {CustomIde}) (RULES (RULE T__0 (BLOCK (ALT 'class'))) (RULE T__1 (BLOCK (ALT '{'))) (RULE T__2 (BLOCK (ALT '}'))) (RULE T__3 (BLOCK (ALT ';'))) (RULE T__4 (BLOCK (ALT '['))) (RULE T__5 (BLOCK (ALT ']'))) (RULE T__6 (BLOCK (ALT 'struct'))) (RULE T__7 (BLOCK (ALT 'int'))) (RULE T__8 (BLOCK (ALT 'char'))) (RULE T__9 (BLOCK (ALT 'boolean'))) (RULE T__10 (BLOCK (ALT 'void'))) (RULE T__11 (BLOCK (ALT '('))) (RULE T__12 (BLOCK (ALT ','))) (RULE T__13 (BLOCK (ALT ')'))) (RULE T__14 (BLOCK (ALT '='))) (RULE T__15 (BLOCK (ALT '(char)'))) (RULE T__16 (BLOCK (ALT 'return'))) (RULE T__17 (BLOCK (ALT '.'))) (RULE T__18 (BLOCK (ALT '-'))) (RULE T__19 (BLOCK (ALT '!'))) (RULE T__20 (BLOCK (ALT '*'))) (RULE T__21 (BLOCK (ALT '/'))) (RULE T__22 (BLOCK (ALT '%'))) (RULE T__23 (BLOCK (ALT '+'))) (RULE T__24 (BLOCK (ALT '<'))) (RULE T__25 (BLOCK (ALT '>'))) (RULE T__26 (BLOCK (ALT '<='))) (RULE T__27 (BLOCK (ALT '>='))) (RULE T__28 (BLOCK (ALT '=='))) (RULE T__29 (BLOCK (ALT '!='))) (RULE T__30 (BLOCK (ALT '&&'))) (RULE T__31 (BLOCK (ALT '||'))) (RULE T__32 (BLOCK (ALT 'true'))) (RULE T__33 (BLOCK (ALT 'false'))) (RULE IfStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))))) (RULE WhileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE Id (BLOCK (ALT Letter (* (BLOCK (ALT Letter) (ALT Digit)))))) (RULE Num (BLOCK (ALT (+ (BLOCK (ALT Digit)))))) (RULE CharacterLiteral (BLOCK (ALT '\'' SingleCharacter '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\]))))) (RULE Digit (BLOCK (ALT [0-9]))) (RULE Letter (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [  \t\r\n\u000C])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2020-10-02 00:29:58:177 left-recursion LogManager.java:25 expression
    :   ( {} location<tokenIndex=464> 
        | methodCall<tokenIndex=468> 
        | Num<tokenIndex=472> 
        | CharacterLiteral<tokenIndex=476> 
        | bool_literal<tokenIndex=480> 
        | '-'<tokenIndex=524> expression<tokenIndex=526,p=3> 
        | '!'<tokenIndex=530> expression<tokenIndex=532,p=2> 
        | '('<tokenIndex=536> expression<tokenIndex=538> ')'<tokenIndex=540> 
        )
        (
          {self.precpred(self._ctx, 8)}?<p=8> arith_higher_op<tokenIndex=486> expression<tokenIndex=488,p=9>
                  | {self.precpred(self._ctx, 7)}?<p=7> arith_op<tokenIndex=494> expression<tokenIndex=496,p=8>
                  | {self.precpred(self._ctx, 6)}?<p=6> rel_op<tokenIndex=502> expression<tokenIndex=504,p=7>
                  | {self.precpred(self._ctx, 5)}?<p=5> eq_op<tokenIndex=510> expression<tokenIndex=512,p=6>
                  | {self.precpred(self._ctx, 4)}?<p=4> cond_op<tokenIndex=518> expression<tokenIndex=520,p=5>
        )*
    ;
2020-10-02 00:29:58:190 grammar LogManager.java:25 added: (RULE expression (BLOCK (ALT (BLOCK (ALT {} (location (ELEMENT_OPTIONS (= tokenIndex 464)))) (ALT (methodCall (ELEMENT_OPTIONS (= tokenIndex 468)))) (ALT (Num (ELEMENT_OPTIONS (= tokenIndex 472)))) (ALT (CharacterLiteral (ELEMENT_OPTIONS (= tokenIndex 476)))) (ALT (bool_literal (ELEMENT_OPTIONS (= tokenIndex 480)))) (ALT ('-' (ELEMENT_OPTIONS (= tokenIndex 524))) (expression (ELEMENT_OPTIONS (= tokenIndex 526) (= p 3)))) (ALT ('!' (ELEMENT_OPTIONS (= tokenIndex 530))) (expression (ELEMENT_OPTIONS (= tokenIndex 532) (= p 2)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 536))) (expression (ELEMENT_OPTIONS (= tokenIndex 538))) (')' (ELEMENT_OPTIONS (= tokenIndex 540))))) (* (BLOCK (ALT ({self.precpred(self._ctx, 8)}? (ELEMENT_OPTIONS (= p 8))) (arith_higher_op (ELEMENT_OPTIONS (= tokenIndex 486))) (expression (ELEMENT_OPTIONS (= tokenIndex 488) (= p 9)))) (ALT ({self.precpred(self._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (arith_op (ELEMENT_OPTIONS (= tokenIndex 494))) (expression (ELEMENT_OPTIONS (= tokenIndex 496) (= p 8)))) (ALT ({self.precpred(self._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (rel_op (ELEMENT_OPTIONS (= tokenIndex 502))) (expression (ELEMENT_OPTIONS (= tokenIndex 504) (= p 7)))) (ALT ({self.precpred(self._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (eq_op (ELEMENT_OPTIONS (= tokenIndex 510))) (expression (ELEMENT_OPTIONS (= tokenIndex 512) (= p 6)))) (ALT ({self.precpred(self._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (cond_op (ELEMENT_OPTIONS (= tokenIndex 518))) (expression (ELEMENT_OPTIONS (= tokenIndex 520) (= p 5)))))))))
2020-10-02 00:29:58:385 semantics LogManager.java:25 tokens={EOF=-1, Id=1, Num=2, IfStatement=3, WhileStatement=4, CharacterLiteral=5}
2020-10-02 00:29:58:385 semantics LogManager.java:25 strings={}
