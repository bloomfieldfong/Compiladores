2020-10-01 01:11:53:652 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Decaf (@ lexer namespace {CustomIde}) (@ parser namespace {CustomIde}) (RULES (RULE program (BLOCK (ALT 'class' Id '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration) (ALT stuctVariable))) (RULE varDeclaration (BLOCK (ALT (= vartype varType) Id ';') (ALT (= vartype varType) Id '[' Num ']' ';'))) (RULE structVariable (BLOCK (ALT 'struct' (= struct Id) Id ';'))) (RULE structDeclaration (BLOCK (ALT 'struct' Id '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' Id) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT (= metoInt 'int') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoChar 'char') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoBool 'boolean') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metVoid 'void') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE parameter (BLOCK (ALT (= param parameterType) Id))) (RULE parameterType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))) (ALT 'while' '(' expression ')' block) (ALT 'return' (? (BLOCK (ALT expression))) ';') (ALT methodCall ';') (ALT block) (ALT location '=' expression ';') (ALT location '=' '(char)' expression ';') (ALT (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT Id (? (BLOCK (ALT '.' location)))) (ALT Id '[' expression ']' (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT Num) (ALT CharacterLiteral) (ALT bool_literal) (ALT expression arith_op expression) (ALT expression rel_op expression) (ALT expression eq_op expression) (ALT expression cond_op expression) (ALT '-' expression) (ALT '!' expression) (ALT '(' expression ')'))) (RULE methodCall (BLOCK (ALT Id '(' (? (BLOCK (ALT arg (* (BLOCK (ALT ',' arg)))))) ')'))) (RULE arg (BLOCK (ALT expression))) (RULE arith_op (BLOCK (ALT '+') (ALT '-') (ALT '*') (ALT '/') (ALT '%'))) (RULE rel_op (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) (RULE eq_op (BLOCK (ALT '==') (ALT '!='))) (RULE cond_op (BLOCK (ALT '&&') (ALT '||'))) (RULE bool_literal (BLOCK (ALT 'true') (ALT 'false'))) (RULE Id (BLOCK (ALT Letter (* (BLOCK (ALT Letter) (ALT Digit)))))) (RULE Num (BLOCK (ALT (+ (BLOCK (ALT Digit)))))) (RULE CharacterLiteral (BLOCK (ALT '\'' SingleCharacter '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\]))))) (RULE Digit (BLOCK (ALT [0-9]))) (RULE Letter (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [  \t\r\n\u000C])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2020-10-01 01:11:53:675 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Decaf (@ lexer namespace {CustomIde}) (@ parser namespace {CustomIde}) (RULES (RULE program (BLOCK (ALT 'class' Id '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration) (ALT stuctVariable))) (RULE varDeclaration (BLOCK (ALT (= vartype varType) Id ';') (ALT (= vartype varType) Id '[' Num ']' ';'))) (RULE structVariable (BLOCK (ALT 'struct' (= struct Id) Id ';'))) (RULE structDeclaration (BLOCK (ALT 'struct' Id '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' Id) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT (= metoInt 'int') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoChar 'char') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoBool 'boolean') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metVoid 'void') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE parameter (BLOCK (ALT (= param parameterType) Id))) (RULE parameterType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))) (ALT 'while' '(' expression ')' block) (ALT 'return' (? (BLOCK (ALT expression))) ';') (ALT methodCall ';') (ALT block) (ALT location '=' expression ';') (ALT location '=' '(char)' expression ';') (ALT (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT Id (? (BLOCK (ALT '.' location)))) (ALT Id '[' expression ']' (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT Num) (ALT CharacterLiteral) (ALT bool_literal) (ALT expression arith_op expression) (ALT expression rel_op expression) (ALT expression eq_op expression) (ALT expression cond_op expression) (ALT '-' expression) (ALT '!' expression) (ALT '(' expression ')'))) (RULE methodCall (BLOCK (ALT Id '(' (? (BLOCK (ALT arg (* (BLOCK (ALT ',' arg)))))) ')'))) (RULE arg (BLOCK (ALT expression))) (RULE arith_op (BLOCK (ALT (SET '+' '-' '*' '/' '%')))) (RULE rel_op (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE eq_op (BLOCK (ALT (SET '==' '!=')))) (RULE cond_op (BLOCK (ALT (SET '&&' '||')))) (RULE bool_literal (BLOCK (ALT (SET 'true' 'false')))) (RULE Id (BLOCK (ALT Letter (* (BLOCK (ALT Letter) (ALT Digit)))))) (RULE Num (BLOCK (ALT (+ (BLOCK (ALT Digit)))))) (RULE CharacterLiteral (BLOCK (ALT '\'' SingleCharacter '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\]))))) (RULE Digit (BLOCK (ALT [0-9]))) (RULE Letter (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [  \t\r\n\u000C])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2020-10-01 01:11:53:695 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Decaf (@ parser namespace {CustomIde}) (RULES (RULE program (BLOCK (ALT 'class' Id '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration) (ALT stuctVariable))) (RULE varDeclaration (BLOCK (ALT (= vartype varType) Id ';') (ALT (= vartype varType) Id '[' Num ']' ';'))) (RULE structVariable (BLOCK (ALT 'struct' (= struct Id) Id ';'))) (RULE structDeclaration (BLOCK (ALT 'struct' Id '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' Id) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT (= metoInt 'int') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoChar 'char') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metoBool 'boolean') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block) (ALT (= metVoid 'void') Id '(' (? (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE parameter (BLOCK (ALT (= param parameterType) Id))) (RULE parameterType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))) (ALT 'while' '(' expression ')' block) (ALT 'return' (? (BLOCK (ALT expression))) ';') (ALT methodCall ';') (ALT block) (ALT location '=' expression ';') (ALT location '=' '(char)' expression ';') (ALT (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT Id (? (BLOCK (ALT '.' location)))) (ALT Id '[' expression ']' (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT Num) (ALT CharacterLiteral) (ALT bool_literal) (ALT expression arith_op expression) (ALT expression rel_op expression) (ALT expression eq_op expression) (ALT expression cond_op expression) (ALT '-' expression) (ALT '!' expression) (ALT '(' expression ')'))) (RULE methodCall (BLOCK (ALT Id '(' (? (BLOCK (ALT arg (* (BLOCK (ALT ',' arg)))))) ')'))) (RULE arg (BLOCK (ALT expression))) (RULE arith_op (BLOCK (ALT (SET '+' '-' '*' '/' '%')))) (RULE rel_op (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE eq_op (BLOCK (ALT (SET '==' '!=')))) (RULE cond_op (BLOCK (ALT (SET '&&' '||')))) (RULE bool_literal (BLOCK (ALT (SET 'true' 'false'))))))
2020-10-01 01:11:53:695 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR DecafLexer (@ lexer namespace {CustomIde}) (@ parser namespace {CustomIde}) (RULES (RULE T__0 (BLOCK (ALT 'class'))) (RULE T__1 (BLOCK (ALT '{'))) (RULE T__2 (BLOCK (ALT '}'))) (RULE T__3 (BLOCK (ALT ';'))) (RULE T__4 (BLOCK (ALT '['))) (RULE T__5 (BLOCK (ALT ']'))) (RULE T__6 (BLOCK (ALT 'struct'))) (RULE T__7 (BLOCK (ALT 'int'))) (RULE T__8 (BLOCK (ALT 'char'))) (RULE T__9 (BLOCK (ALT 'boolean'))) (RULE T__10 (BLOCK (ALT 'void'))) (RULE T__11 (BLOCK (ALT '('))) (RULE T__12 (BLOCK (ALT ','))) (RULE T__13 (BLOCK (ALT ')'))) (RULE T__14 (BLOCK (ALT 'if'))) (RULE T__15 (BLOCK (ALT 'else'))) (RULE T__16 (BLOCK (ALT 'while'))) (RULE T__17 (BLOCK (ALT 'return'))) (RULE T__18 (BLOCK (ALT '='))) (RULE T__19 (BLOCK (ALT '(char)'))) (RULE T__20 (BLOCK (ALT '.'))) (RULE T__21 (BLOCK (ALT '-'))) (RULE T__22 (BLOCK (ALT '!'))) (RULE T__23 (BLOCK (ALT '+'))) (RULE T__24 (BLOCK (ALT '*'))) (RULE T__25 (BLOCK (ALT '/'))) (RULE T__26 (BLOCK (ALT '%'))) (RULE T__27 (BLOCK (ALT '<'))) (RULE T__28 (BLOCK (ALT '>'))) (RULE T__29 (BLOCK (ALT '<='))) (RULE T__30 (BLOCK (ALT '>='))) (RULE T__31 (BLOCK (ALT '=='))) (RULE T__32 (BLOCK (ALT '!='))) (RULE T__33 (BLOCK (ALT '&&'))) (RULE T__34 (BLOCK (ALT '||'))) (RULE T__35 (BLOCK (ALT 'true'))) (RULE T__36 (BLOCK (ALT 'false'))) (RULE Id (BLOCK (ALT Letter (* (BLOCK (ALT Letter) (ALT Digit)))))) (RULE Num (BLOCK (ALT (+ (BLOCK (ALT Digit)))))) (RULE CharacterLiteral (BLOCK (ALT '\'' SingleCharacter '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\]))))) (RULE Digit (BLOCK (ALT [0-9]))) (RULE Letter (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [  \t\r\n\u000C])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2020-10-01 01:11:53:948 action-translator LogManager.java:25 translate CustomIde
