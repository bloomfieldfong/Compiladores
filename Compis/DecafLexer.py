# Generated from Decaf.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u0116\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3")
        buf.write("\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16")
        buf.write("\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26")
        buf.write("\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3")
        buf.write("%\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\7\'\u00e3\n\'\f\'\16\'")
        buf.write("\u00e6\13\'\3(\6(\u00e9\n(\r(\16(\u00ea\3)\3)\3)\3)\3")
        buf.write("*\3*\3+\3+\3,\3,\3-\6-\u00f8\n-\r-\16-\u00f9\3-\3-\3.")
        buf.write("\3.\3.\3.\7.\u0102\n.\f.\16.\u0105\13.\3.\3.\3.\3.\3.")
        buf.write("\3/\3/\3/\3/\7/\u0110\n/\f/\16/\u0113\13/\3/\3/\3\u0103")
        buf.write("\2\60\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
        buf.write("\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S\2U+W,Y-[.]/\3\2\7\4\2))^^\3\2\62;\4\2C\\c|\5\2")
        buf.write("\13\f\16\17\"\"\4\2\f\f\17\17\2\u011a\2\3\3\2\2\2\2\5")
        buf.write("\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2")
        buf.write("\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2")
        buf.write("\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2")
        buf.write("\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2")
        buf.write("\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2")
        buf.write("Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\3_\3\2\2\2\5e\3\2\2\2")
        buf.write("\7g\3\2\2\2\ti\3\2\2\2\13k\3\2\2\2\rm\3\2\2\2\17o\3\2")
        buf.write("\2\2\21v\3\2\2\2\23z\3\2\2\2\25\177\3\2\2\2\27\u0087\3")
        buf.write("\2\2\2\31\u008c\3\2\2\2\33\u008e\3\2\2\2\35\u0090\3\2")
        buf.write("\2\2\37\u0092\3\2\2\2!\u0094\3\2\2\2#\u009b\3\2\2\2%\u009e")
        buf.write("\3\2\2\2\'\u00a3\3\2\2\2)\u00a9\3\2\2\2+\u00b0\3\2\2\2")
        buf.write("-\u00b2\3\2\2\2/\u00b4\3\2\2\2\61\u00b6\3\2\2\2\63\u00b8")
        buf.write("\3\2\2\2\65\u00ba\3\2\2\2\67\u00bc\3\2\2\29\u00be\3\2")
        buf.write("\2\2;\u00c0\3\2\2\2=\u00c2\3\2\2\2?\u00c5\3\2\2\2A\u00c8")
        buf.write("\3\2\2\2C\u00cb\3\2\2\2E\u00ce\3\2\2\2G\u00d1\3\2\2\2")
        buf.write("I\u00d4\3\2\2\2K\u00d9\3\2\2\2M\u00df\3\2\2\2O\u00e8\3")
        buf.write("\2\2\2Q\u00ec\3\2\2\2S\u00f0\3\2\2\2U\u00f2\3\2\2\2W\u00f4")
        buf.write("\3\2\2\2Y\u00f7\3\2\2\2[\u00fd\3\2\2\2]\u010b\3\2\2\2")
        buf.write("_`\7e\2\2`a\7n\2\2ab\7c\2\2bc\7u\2\2cd\7u\2\2d\4\3\2\2")
        buf.write("\2ef\7}\2\2f\6\3\2\2\2gh\7\177\2\2h\b\3\2\2\2ij\7=\2\2")
        buf.write("j\n\3\2\2\2kl\7]\2\2l\f\3\2\2\2mn\7_\2\2n\16\3\2\2\2o")
        buf.write("p\7u\2\2pq\7v\2\2qr\7t\2\2rs\7w\2\2st\7e\2\2tu\7v\2\2")
        buf.write("u\20\3\2\2\2vw\7k\2\2wx\7p\2\2xy\7v\2\2y\22\3\2\2\2z{")
        buf.write("\7e\2\2{|\7j\2\2|}\7c\2\2}~\7t\2\2~\24\3\2\2\2\177\u0080")
        buf.write("\7d\2\2\u0080\u0081\7q\2\2\u0081\u0082\7q\2\2\u0082\u0083")
        buf.write("\7n\2\2\u0083\u0084\7g\2\2\u0084\u0085\7c\2\2\u0085\u0086")
        buf.write("\7p\2\2\u0086\26\3\2\2\2\u0087\u0088\7x\2\2\u0088\u0089")
        buf.write("\7q\2\2\u0089\u008a\7k\2\2\u008a\u008b\7f\2\2\u008b\30")
        buf.write("\3\2\2\2\u008c\u008d\7*\2\2\u008d\32\3\2\2\2\u008e\u008f")
        buf.write("\7.\2\2\u008f\34\3\2\2\2\u0090\u0091\7+\2\2\u0091\36\3")
        buf.write("\2\2\2\u0092\u0093\7?\2\2\u0093 \3\2\2\2\u0094\u0095\7")
        buf.write("*\2\2\u0095\u0096\7e\2\2\u0096\u0097\7j\2\2\u0097\u0098")
        buf.write("\7c\2\2\u0098\u0099\7t\2\2\u0099\u009a\7+\2\2\u009a\"")
        buf.write("\3\2\2\2\u009b\u009c\7k\2\2\u009c\u009d\7h\2\2\u009d$")
        buf.write("\3\2\2\2\u009e\u009f\7g\2\2\u009f\u00a0\7n\2\2\u00a0\u00a1")
        buf.write("\7u\2\2\u00a1\u00a2\7g\2\2\u00a2&\3\2\2\2\u00a3\u00a4")
        buf.write("\7y\2\2\u00a4\u00a5\7j\2\2\u00a5\u00a6\7k\2\2\u00a6\u00a7")
        buf.write("\7n\2\2\u00a7\u00a8\7g\2\2\u00a8(\3\2\2\2\u00a9\u00aa")
        buf.write("\7t\2\2\u00aa\u00ab\7g\2\2\u00ab\u00ac\7v\2\2\u00ac\u00ad")
        buf.write("\7w\2\2\u00ad\u00ae\7t\2\2\u00ae\u00af\7p\2\2\u00af*\3")
        buf.write("\2\2\2\u00b0\u00b1\7\60\2\2\u00b1,\3\2\2\2\u00b2\u00b3")
        buf.write("\7/\2\2\u00b3.\3\2\2\2\u00b4\u00b5\7#\2\2\u00b5\60\3\2")
        buf.write("\2\2\u00b6\u00b7\7,\2\2\u00b7\62\3\2\2\2\u00b8\u00b9\7")
        buf.write("\61\2\2\u00b9\64\3\2\2\2\u00ba\u00bb\7\'\2\2\u00bb\66")
        buf.write("\3\2\2\2\u00bc\u00bd\7-\2\2\u00bd8\3\2\2\2\u00be\u00bf")
        buf.write("\7>\2\2\u00bf:\3\2\2\2\u00c0\u00c1\7@\2\2\u00c1<\3\2\2")
        buf.write("\2\u00c2\u00c3\7>\2\2\u00c3\u00c4\7?\2\2\u00c4>\3\2\2")
        buf.write("\2\u00c5\u00c6\7@\2\2\u00c6\u00c7\7?\2\2\u00c7@\3\2\2")
        buf.write("\2\u00c8\u00c9\7?\2\2\u00c9\u00ca\7?\2\2\u00caB\3\2\2")
        buf.write("\2\u00cb\u00cc\7#\2\2\u00cc\u00cd\7?\2\2\u00cdD\3\2\2")
        buf.write("\2\u00ce\u00cf\7(\2\2\u00cf\u00d0\7(\2\2\u00d0F\3\2\2")
        buf.write("\2\u00d1\u00d2\7~\2\2\u00d2\u00d3\7~\2\2\u00d3H\3\2\2")
        buf.write("\2\u00d4\u00d5\7v\2\2\u00d5\u00d6\7t\2\2\u00d6\u00d7\7")
        buf.write("w\2\2\u00d7\u00d8\7g\2\2\u00d8J\3\2\2\2\u00d9\u00da\7")
        buf.write("h\2\2\u00da\u00db\7c\2\2\u00db\u00dc\7n\2\2\u00dc\u00dd")
        buf.write("\7u\2\2\u00dd\u00de\7g\2\2\u00deL\3\2\2\2\u00df\u00e4")
        buf.write("\5W,\2\u00e0\u00e3\5W,\2\u00e1\u00e3\5U+\2\u00e2\u00e0")
        buf.write("\3\2\2\2\u00e2\u00e1\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4")
        buf.write("\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5N\3\2\2\2\u00e6")
        buf.write("\u00e4\3\2\2\2\u00e7\u00e9\5U+\2\u00e8\u00e7\3\2\2\2\u00e9")
        buf.write("\u00ea\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2")
        buf.write("\u00ebP\3\2\2\2\u00ec\u00ed\7)\2\2\u00ed\u00ee\5S*\2\u00ee")
        buf.write("\u00ef\7)\2\2\u00efR\3\2\2\2\u00f0\u00f1\n\2\2\2\u00f1")
        buf.write("T\3\2\2\2\u00f2\u00f3\t\3\2\2\u00f3V\3\2\2\2\u00f4\u00f5")
        buf.write("\t\4\2\2\u00f5X\3\2\2\2\u00f6\u00f8\t\5\2\2\u00f7\u00f6")
        buf.write("\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\b-\2\2")
        buf.write("\u00fcZ\3\2\2\2\u00fd\u00fe\7\61\2\2\u00fe\u00ff\7,\2")
        buf.write("\2\u00ff\u0103\3\2\2\2\u0100\u0102\13\2\2\2\u0101\u0100")
        buf.write("\3\2\2\2\u0102\u0105\3\2\2\2\u0103\u0104\3\2\2\2\u0103")
        buf.write("\u0101\3\2\2\2\u0104\u0106\3\2\2\2\u0105\u0103\3\2\2\2")
        buf.write("\u0106\u0107\7,\2\2\u0107\u0108\7\61\2\2\u0108\u0109\3")
        buf.write("\2\2\2\u0109\u010a\b.\2\2\u010a\\\3\2\2\2\u010b\u010c")
        buf.write("\7\61\2\2\u010c\u010d\7\61\2\2\u010d\u0111\3\2\2\2\u010e")
        buf.write("\u0110\n\6\2\2\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2")
        buf.write("\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114\3")
        buf.write("\2\2\2\u0113\u0111\3\2\2\2\u0114\u0115\b/\2\2\u0115^\3")
        buf.write("\2\2\2\t\2\u00e2\u00e4\u00ea\u00f9\u0103\u0111\3\b\2\2")
        return buf.getvalue()


class DecafLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    Id = 38
    Num = 39
    CharacterLiteral = 40
    Digit = 41
    Letter = 42
    WS = 43
    COMMENT = 44
    LINE_COMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'}'", "';'", "'['", "']'", "'struct'", "'int'", 
            "'char'", "'boolean'", "'void'", "'('", "','", "')'", "'='", 
            "'(char)'", "'if'", "'else'", "'while'", "'return'", "'.'", 
            "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='", "'&&'", "'||'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "Id", "Num", "CharacterLiteral", "Digit", "Letter", "WS", "COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "Id", "Num", 
                  "CharacterLiteral", "SingleCharacter", "Digit", "Letter", 
                  "WS", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "Decaf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


